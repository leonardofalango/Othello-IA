for (int shiftI = colInGame, quant = 0; shiftI >= 0; shiftI--)
        {
            int col = shiftI * 8;
            ulong posArr = u << (rowInGame + col);
            
            if ((enemyBoard & posArr) > 0)
                quant += 1;
            
            if (quant > 1 && ((myBoard & posArr) > 0))
                return true;

            if ((myBoard & posArr) > 0)
                return false;
        }
        
        //   ðŸ€„ âž¡
        for (int shiftI = colInGame + 1, quant = 0; shiftI < 8; shiftI++)
        {
            int col = shiftI * 8;
            ulong posArr = u << (rowInGame + col);
            
            if ((enemyBoard & posArr) > 0)
                quant += 1;
            
            if (quant > 1 && ((myBoard & posArr) > 0))
                return true;

            if ((myBoard & posArr) > 0)
            return false;
        }
        
        //    â¬†
        //   ðŸ€„
        for (int shiftI = rowInGame + 1, quant = 0; shiftI < 8; shiftI++)
        {
            int row = shiftI;
            ulong posArr = u << (row + (colInGame * 8));
            
            if ((enemyBoard & posArr) > 0)
                quant += 1;
            
            if (quant > 1 && ((myBoard & posArr) > 0))
                return true;

            if ((myBoard & posArr) > 0)
            return false;
            
            
        }

        //  ðŸ€„
        //  â¬‡
        for (int shiftI = colInGame - 1, quant = 0; shiftI >= 0; shiftI--)
        {
            int row = shiftI;
            ulong posArr = u << (row + (colInGame * 8));
            
            if ((enemyBoard & posArr) > 0)
                quant += 1;
            
            if (quant > 1 && ((myBoard & posArr) > 0))
                return true;

            if ((myBoard & posArr) > 0)
            return false;
        }

        //     â†—
        //  ðŸ€„
        for (int shiftI = colInGame + 1, quant = 0; shiftI < 8; shiftI++)
            for (int shiftJ = rowInGame + 1; shiftJ < 8; shiftJ++)
            {
                int col = shiftI;
                int row = shiftJ * 8;
                ulong posArr = u << (col + row);
                
                if ((enemyBoard & posArr) > 0)
                    quant += 1;
                
                if (quant > 1 && ((myBoard & posArr) > 0))
                    return true;
            }

        //  ðŸ€„
        //â†™
        for (int shiftI = colInGame - 1, quant = 0; shiftI >= 0; shiftI--)
            for (int shiftJ = rowInGame - 1; shiftJ > 0; shiftJ--)
            {
                int col = shiftI;
                int row = shiftJ * 8;
                ulong posArr = u << (col + row);
                
                if ((enemyBoard & posArr) > 0)
                    quant += 1;
                
                if (quant > 1 && ((myBoard & posArr) > 0))
                    return true;
            }
    
        // â†–
        //  ðŸ€„
        for (int shiftI = colInGame - 1, quant = 0; shiftI >= 0; shiftI--)
            for (int shiftJ = rowInGame + 1; shiftJ < 8; shiftJ++)
            {
                int col = shiftI;
                int row = shiftJ * 8;
                ulong posArr = u << (col + row);
                
                if ((enemyBoard & posArr) > 0)
                    quant += 1;
                
                if (quant > 1 && ((myBoard & posArr) > 0))
                    return true;
            }
    
        //  ðŸ€„
        //   â†˜
        for (int shiftI = colInGame + 1, quant = 0; shiftI < 8; shiftI++)
            for (int shiftJ = rowInGame - 1; shiftJ > 0; shiftJ--)
            {
                int col = shiftI;
                int row = shiftJ * 8;
                ulong posArr = u << (col + row);
                
                if ((enemyBoard & posArr) > 0)
                    quant += 1;
                
                if (quant > 1 && ((myBoard & posArr) > 0))
                    return true;
            }

        return false;
    }